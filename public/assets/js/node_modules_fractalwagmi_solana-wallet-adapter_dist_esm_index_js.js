(self["webpackChunkNodigy"] = self["webpackChunkNodigy"] || []).push([["node_modules_fractalwagmi_solana-wallet-adapter_dist_esm_index_js"],{

/***/ "./node_modules/@fractalwagmi/solana-wallet-adapter/node_modules/base-x/src/index.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@fractalwagmi/solana-wallet-adapter/node_modules/base-x/src/index.js ***!
  \*******************************************************************************************/
/***/ ((module) => {

"use strict";

// base-x encoding / decoding
// Copyright (c) 2018 base-x contributors
// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)
// Distributed under the MIT software license, see the accompanying
// file LICENSE or http://www.opensource.org/licenses/mit-license.php.
function base (ALPHABET) {
  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }
  var BASE_MAP = new Uint8Array(256)
  for (var j = 0; j < BASE_MAP.length; j++) {
    BASE_MAP[j] = 255
  }
  for (var i = 0; i < ALPHABET.length; i++) {
    var x = ALPHABET.charAt(i)
    var xc = x.charCodeAt(0)
    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }
    BASE_MAP[xc] = i
  }
  var BASE = ALPHABET.length
  var LEADER = ALPHABET.charAt(0)
  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up
  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up
  function encode (source) {
    if (source instanceof Uint8Array) {
    } else if (ArrayBuffer.isView(source)) {
      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength)
    } else if (Array.isArray(source)) {
      source = Uint8Array.from(source)
    }
    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }
    if (source.length === 0) { return '' }
        // Skip & count leading zeroes.
    var zeroes = 0
    var length = 0
    var pbegin = 0
    var pend = source.length
    while (pbegin !== pend && source[pbegin] === 0) {
      pbegin++
      zeroes++
    }
        // Allocate enough space in big-endian base58 representation.
    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0
    var b58 = new Uint8Array(size)
        // Process the bytes.
    while (pbegin !== pend) {
      var carry = source[pbegin]
            // Apply "b58 = b58 * 256 + ch".
      var i = 0
      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {
        carry += (256 * b58[it1]) >>> 0
        b58[it1] = (carry % BASE) >>> 0
        carry = (carry / BASE) >>> 0
      }
      if (carry !== 0) { throw new Error('Non-zero carry') }
      length = i
      pbegin++
    }
        // Skip leading zeroes in base58 result.
    var it2 = size - length
    while (it2 !== size && b58[it2] === 0) {
      it2++
    }
        // Translate the result into a string.
    var str = LEADER.repeat(zeroes)
    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }
    return str
  }
  function decodeUnsafe (source) {
    if (typeof source !== 'string') { throw new TypeError('Expected String') }
    if (source.length === 0) { return new Uint8Array() }
    var psz = 0
        // Skip and count leading '1's.
    var zeroes = 0
    var length = 0
    while (source[psz] === LEADER) {
      zeroes++
      psz++
    }
        // Allocate enough space in big-endian base256 representation.
    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.
    var b256 = new Uint8Array(size)
        // Process the characters.
    while (source[psz]) {
            // Decode character
      var carry = BASE_MAP[source.charCodeAt(psz)]
            // Invalid character
      if (carry === 255) { return }
      var i = 0
      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {
        carry += (BASE * b256[it3]) >>> 0
        b256[it3] = (carry % 256) >>> 0
        carry = (carry / 256) >>> 0
      }
      if (carry !== 0) { throw new Error('Non-zero carry') }
      length = i
      psz++
    }
        // Skip leading zeroes in b256.
    var it4 = size - length
    while (it4 !== size && b256[it4] === 0) {
      it4++
    }
    var vch = new Uint8Array(zeroes + (size - it4))
    var j = zeroes
    while (it4 !== size) {
      vch[j++] = b256[it4++]
    }
    return vch
  }
  function decode (string) {
    var buffer = decodeUnsafe(string)
    if (buffer) { return buffer }
    throw new Error('Non-base' + BASE + ' character')
  }
  return {
    encode: encode,
    decodeUnsafe: decodeUnsafe,
    decode: decode
  }
}
module.exports = base


/***/ }),

/***/ "./node_modules/@fractalwagmi/solana-wallet-adapter/node_modules/bs58/index.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@fractalwagmi/solana-wallet-adapter/node_modules/bs58/index.js ***!
  \*************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const basex = __webpack_require__(/*! base-x */ "./node_modules/@fractalwagmi/solana-wallet-adapter/node_modules/base-x/src/index.js")
const ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'

module.exports = basex(ALPHABET)


/***/ }),

/***/ "./node_modules/@fractalwagmi/popup-connection/dist/esm/connection-manager.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@fractalwagmi/popup-connection/dist/esm/connection-manager.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ConnectionManager": () => (/* binding */ ConnectionManager)
/* harmony export */ });
/* harmony import */ var _core_connection_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core/connection.js */ "./node_modules/@fractalwagmi/popup-connection/dist/esm/core/connection.js");
/* harmony import */ var _core_constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./core/constants.js */ "./node_modules/@fractalwagmi/popup-connection/dist/esm/core/constants.js");
/* harmony import */ var _core_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./core/types.js */ "./node_modules/@fractalwagmi/popup-connection/dist/esm/core/types.js");
/* harmony import */ var _core_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./core/utils.js */ "./node_modules/@fractalwagmi/popup-connection/dist/esm/core/utils.js");




class ConnectionManager {
    constructor(platform) {
        this.platform = platform;
        this.connection = null;
        this.popupWindow = null;
        this.handleMessage = (e) => {
            var _a, _b;
            if (!(0,_core_utils_js__WEBPACK_IMPORTED_MODULE_3__.validateOrigin)(e.origin)) {
                return;
            }
            const validatedOrigin = e.origin;
            if (!this.popupWindow) {
                return;
            }
            if (e.data.event === _core_types_js__WEBPACK_IMPORTED_MODULE_2__.PopupEvent.HANDSHAKE && !this.connection) {
                if (!this.verifyAndResetNonce((_a = e.data.payload) === null || _a === void 0 ? void 0 : _a.nonce)) {
                    return;
                }
                this.popupWindow.postMessage({
                    event: _core_types_js__WEBPACK_IMPORTED_MODULE_2__.PopupEvent.HANDSHAKE_ACK,
                    payload: {
                        platform: this.platform,
                    },
                }, validatedOrigin);
                this.connection = new _core_connection_js__WEBPACK_IMPORTED_MODULE_0__.Connection(validatedOrigin, this.popupWindow);
                (_b = this.connectionUpdatedCallback) === null || _b === void 0 ? void 0 : _b.call(this, this.connection);
            }
            if (!this.connection) {
                return;
            }
            this.connection.runHandlersForEvent(e.data.event, e.data.payload);
            if (e.data.event === _core_types_js__WEBPACK_IMPORTED_MODULE_2__.PopupEvent.POPUP_CLOSED && this.connection) {
                this.resetConnection();
                this.popupWindow = null;
            }
        };
    }
    initialize() {
        window.addEventListener('message', this.handleMessage);
        return this;
    }
    tearDown() {
        window.removeEventListener('message', this.handleMessage);
        this.resetConnection();
        return this;
    }
    open({ url, widthPx = _core_constants_js__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_POPUP_WIDTH_PX, heightPx = _core_constants_js__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_POPUP_HEIGHT_PX, nonce, }) {
        var _a;
        if ((_a = this.popupWindow) === null || _a === void 0 ? void 0 : _a.closed) {
            this.resetConnectionAndPopupWindow();
        }
        if (this.popupWindow) {
            return;
        }
        this.initialize();
        if (nonce) {
            this.nonce = nonce;
        }
        const left = window.screenX + (window.innerWidth - widthPx) / 2;
        const top = window.screenY + (window.innerHeight - heightPx) / 2;
        this.popupWindow = (0,_core_utils_js__WEBPACK_IMPORTED_MODULE_3__.openPopup)({
            height: heightPx,
            left,
            top,
            url,
            width: widthPx,
        });
    }
    close() {
        if (!this.popupWindow) {
            return;
        }
        this.popupWindow.close();
        this.resetConnectionAndPopupWindow();
    }
    onConnectionUpdated(callback) {
        this.connectionUpdatedCallback = callback;
        return this;
    }
    getConnection() {
        return this.connection;
    }
    resetConnectionAndPopupWindow() {
        this.resetConnection();
        this.popupWindow = null;
    }
    resetConnection() {
        var _a, _b;
        (_a = this.connection) === null || _a === void 0 ? void 0 : _a.resetHandlers();
        this.connection = null;
        (_b = this.connectionUpdatedCallback) === null || _b === void 0 ? void 0 : _b.call(this, this.connection);
    }
    verifyAndResetNonce(uncheckedNonce) {
        if (!this.nonce) {
            return true;
        }
        const result = uncheckedNonce === this.nonce;
        if (result) {
            this.nonce = undefined;
        }
        return result;
    }
}
//# sourceMappingURL=connection-manager.js.map

/***/ }),

/***/ "./node_modules/@fractalwagmi/popup-connection/dist/esm/core/connection.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@fractalwagmi/popup-connection/dist/esm/core/connection.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Connection": () => (/* binding */ Connection)
/* harmony export */ });
class Connection {
    constructor(validatedOrigin, targetWindow) {
        this.validatedOrigin = validatedOrigin;
        this.targetWindow = targetWindow;
        this.handlers = new Map();
    }
    off(event, callback) {
        const eventCallbacks = this.handlers.get(event);
        eventCallbacks === null || eventCallbacks === void 0 ? void 0 : eventCallbacks.delete(callback);
    }
    on(event, callback) {
        var _a;
        const eventCallbacks = (_a = this.handlers.get(event)) !== null && _a !== void 0 ? _a : new Set();
        eventCallbacks.add(callback);
        this.handlers.set(event, eventCallbacks);
    }
    send({ event, payload }) {
        this.targetWindow.postMessage({
            event,
            payload,
        }, this.validatedOrigin);
    }
    runHandlersForEvent(event, payload) {
        const eventCallbacks = this.handlers.get(event);
        if (!eventCallbacks) {
            return;
        }
        for (const callback of eventCallbacks) {
            callback(payload);
        }
    }
    resetHandlers() {
        this.handlers.clear();
    }
    export() {
        return {
            off: this.off.bind(this),
            on: this.on.bind(this),
            send: this.send.bind(this),
            validatedOrigin: this.validatedOrigin,
        };
    }
}
//# sourceMappingURL=connection.js.map

/***/ }),

/***/ "./node_modules/@fractalwagmi/popup-connection/dist/esm/core/constants.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@fractalwagmi/popup-connection/dist/esm/core/constants.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DEFAULT_POPUP_HEIGHT_PX": () => (/* binding */ DEFAULT_POPUP_HEIGHT_PX),
/* harmony export */   "DEFAULT_POPUP_WIDTH_PX": () => (/* binding */ DEFAULT_POPUP_WIDTH_PX),
/* harmony export */   "FRACTAL_DOMAIN": () => (/* binding */ FRACTAL_DOMAIN),
/* harmony export */   "FRACTAL_DOMAIN_HTTPS": () => (/* binding */ FRACTAL_DOMAIN_HTTPS),
/* harmony export */   "FRACTAL_DOMAIN_HTTPS_WWW": () => (/* binding */ FRACTAL_DOMAIN_HTTPS_WWW)
/* harmony export */ });
const FRACTAL_DOMAIN = 'fractal.is';
const FRACTAL_DOMAIN_HTTPS = 'https://fractal.is';
const FRACTAL_DOMAIN_HTTPS_WWW = 'https://www.fractal.is';
const DEFAULT_POPUP_WIDTH_PX = 400;
const DEFAULT_POPUP_HEIGHT_PX = 600;
//# sourceMappingURL=constants.js.map

/***/ }),

/***/ "./node_modules/@fractalwagmi/popup-connection/dist/esm/core/types.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@fractalwagmi/popup-connection/dist/esm/core/types.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Platform": () => (/* binding */ Platform),
/* harmony export */   "PopupEvent": () => (/* binding */ PopupEvent)
/* harmony export */ });
var PopupEvent;
(function (PopupEvent) {
    PopupEvent["PROJECT_APPROVED"] = "PROJECT_APPROVED";
    PopupEvent["HANDSHAKE"] = "HANDSHAKE";
    PopupEvent["HANDSHAKE_ACK"] = "HANDSHAKE_ACK";
    PopupEvent["SIGNED_TRANSACTION"] = "SIGNED_TRANSACTION";
    PopupEvent["FAILED_TO_SIGN_TRANSACTION"] = "FAILED_TO_SIGN_TRANSACTION";
    PopupEvent["TRANSACTION_DENIED"] = "TRANSACTION_DENIED";
    PopupEvent["SOLANA_WALLET_ADAPTER_APPROVED"] = "SOLANA_WALLET_ADAPTER_APPROVED";
    PopupEvent["SOLANA_WALLET_ADAPTER_DENIED"] = "SOLANA_WALLET_ADAPTER_DENIED";
    PopupEvent["POPUP_CLOSED"] = "POPUP_CLOSED";
    PopupEvent["TRANSACTION_SIGNATURE_NEEDED"] = "TRANSACTION_SIGNATURE_NEEDED";
    PopupEvent["TRANSACTION_SIGNATURE_NEEDED_RESPONSE"] = "TRANSACTION_SIGNATURE_NEEDED_RESPONSE";
    PopupEvent["AUTH_LOADED"] = "AUTH_LOADED";
    PopupEvent["MESSAGE_SIGNATURE_NEEDED"] = "MESSAGE_SIGNATURE_NEEDED";
    PopupEvent["MESSAGE_SIGNATURE_NEEDED_RESPONSE"] = "MESSAGE_SIGNATURE_NEEDED_RESPONSE";
    PopupEvent["ONRAMP_FULFILLMENT_COMPLETE"] = "ONRAMP_FULFILLMENT_COMPLETE";
    PopupEvent["ONRAMP_REJECTED"] = "ONRAMP_REJECTED";
})(PopupEvent || (PopupEvent = {}));
var Platform;
(function (Platform) {
    Platform["UNKNOWN"] = "UNKNOWN";
    Platform["REACT_SDK"] = "REACT_SDK";
    Platform["SOLANA_WALLET_ADAPTER"] = "SOLANA_WALLET_ADAPTER";
})(Platform || (Platform = {}));
//# sourceMappingURL=types.js.map

/***/ }),

/***/ "./node_modules/@fractalwagmi/popup-connection/dist/esm/core/utils.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@fractalwagmi/popup-connection/dist/esm/core/utils.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "openPopup": () => (/* binding */ openPopup),
/* harmony export */   "validateOrigin": () => (/* binding */ validateOrigin)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.js */ "./node_modules/@fractalwagmi/popup-connection/dist/esm/core/constants.js");

function validateOrigin(origin) {
    return origin === _constants_js__WEBPACK_IMPORTED_MODULE_0__.FRACTAL_DOMAIN_HTTPS_WWW || origin === _constants_js__WEBPACK_IMPORTED_MODULE_0__.FRACTAL_DOMAIN_HTTPS;
}
const TARGET = 'fractal:approval:popup';
const STATIC_POPUP_FEATURES = ['resizable', 'scrollbars=1', 'status=1'];
function openPopup({ left = 0, scope = window, top = 0, width = _constants_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_POPUP_HEIGHT_PX, height = _constants_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_POPUP_HEIGHT_PX, url, }) {
    return scope.open(url, TARGET, getPopupFeatures({ height, left, top, width }));
}
function getPopupFeatures({ height, left, top, width, }) {
    return [
        'popup',
        `left=${left}`,
        `top=${top}`,
        `width=${width}`,
        `height=${height}`,
        ...STATIC_POPUP_FEATURES,
    ].join(',');
}
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ "./node_modules/@fractalwagmi/popup-connection/dist/esm/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@fractalwagmi/popup-connection/dist/esm/index.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Connection": () => (/* reexport safe */ _core_connection_js__WEBPACK_IMPORTED_MODULE_1__.Connection),
/* harmony export */   "ConnectionManager": () => (/* reexport safe */ _connection_manager_js__WEBPACK_IMPORTED_MODULE_3__.ConnectionManager),
/* harmony export */   "DEFAULT_POPUP_HEIGHT_PX": () => (/* reexport safe */ _core_constants_js__WEBPACK_IMPORTED_MODULE_5__.DEFAULT_POPUP_HEIGHT_PX),
/* harmony export */   "DEFAULT_POPUP_WIDTH_PX": () => (/* reexport safe */ _core_constants_js__WEBPACK_IMPORTED_MODULE_5__.DEFAULT_POPUP_WIDTH_PX),
/* harmony export */   "Platform": () => (/* reexport safe */ _core_types_js__WEBPACK_IMPORTED_MODULE_0__.Platform),
/* harmony export */   "PopupEvent": () => (/* reexport safe */ _core_types_js__WEBPACK_IMPORTED_MODULE_0__.PopupEvent),
/* harmony export */   "assertPayloadIsMessageSignatureNeededPayload": () => (/* reexport safe */ _payloads_index_js__WEBPACK_IMPORTED_MODULE_4__.assertPayloadIsMessageSignatureNeededPayload),
/* harmony export */   "assertPayloadIsMessageSignatureNeededResponsePayload": () => (/* reexport safe */ _payloads_index_js__WEBPACK_IMPORTED_MODULE_4__.assertPayloadIsMessageSignatureNeededResponsePayload),
/* harmony export */   "assertPayloadIsSolanaWalletAdapterApproved": () => (/* reexport safe */ _payloads_index_js__WEBPACK_IMPORTED_MODULE_4__.assertPayloadIsSolanaWalletAdapterApproved),
/* harmony export */   "assertPayloadIsTransactionSignatureNeededPayload": () => (/* reexport safe */ _payloads_index_js__WEBPACK_IMPORTED_MODULE_4__.assertPayloadIsTransactionSignatureNeededPayload),
/* harmony export */   "assertPayloadIsTransactionSignatureNeededResponsePayload": () => (/* reexport safe */ _payloads_index_js__WEBPACK_IMPORTED_MODULE_4__.assertPayloadIsTransactionSignatureNeededResponsePayload),
/* harmony export */   "usePopupConnection": () => (/* reexport safe */ _use_popup_connection_js__WEBPACK_IMPORTED_MODULE_2__.usePopupConnection)
/* harmony export */ });
/* harmony import */ var _core_types_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core/types.js */ "./node_modules/@fractalwagmi/popup-connection/dist/esm/core/types.js");
/* harmony import */ var _core_connection_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./core/connection.js */ "./node_modules/@fractalwagmi/popup-connection/dist/esm/core/connection.js");
/* harmony import */ var _use_popup_connection_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./use-popup-connection.js */ "./node_modules/@fractalwagmi/popup-connection/dist/esm/use-popup-connection.js");
/* harmony import */ var _connection_manager_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./connection-manager.js */ "./node_modules/@fractalwagmi/popup-connection/dist/esm/connection-manager.js");
/* harmony import */ var _payloads_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./payloads/index.js */ "./node_modules/@fractalwagmi/popup-connection/dist/esm/payloads/index.js");
/* harmony import */ var _core_constants_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./core/constants.js */ "./node_modules/@fractalwagmi/popup-connection/dist/esm/core/constants.js");






//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@fractalwagmi/popup-connection/dist/esm/lib/guards.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@fractalwagmi/popup-connection/dist/esm/lib/guards.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isObject": () => (/* binding */ isObject)
/* harmony export */ });
function isObject(value) {
    if (value === null) {
        return false;
    }
    if (typeof value !== 'object') {
        return false;
    }
    return true;
}
//# sourceMappingURL=guards.js.map

/***/ }),

/***/ "./node_modules/@fractalwagmi/popup-connection/dist/esm/payloads/index.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@fractalwagmi/popup-connection/dist/esm/payloads/index.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "assertPayloadIsMessageSignatureNeededPayload": () => (/* reexport safe */ _message_signature_needed_js__WEBPACK_IMPORTED_MODULE_3__.assertPayloadIsMessageSignatureNeededPayload),
/* harmony export */   "assertPayloadIsMessageSignatureNeededResponsePayload": () => (/* reexport safe */ _message_signature_needed_response_js__WEBPACK_IMPORTED_MODULE_4__.assertPayloadIsMessageSignatureNeededResponsePayload),
/* harmony export */   "assertPayloadIsSolanaWalletAdapterApproved": () => (/* reexport safe */ _solana_wallet_adapter_approved_js__WEBPACK_IMPORTED_MODULE_0__.assertPayloadIsSolanaWalletAdapterApproved),
/* harmony export */   "assertPayloadIsTransactionSignatureNeededPayload": () => (/* reexport safe */ _transaction_signature_needed_js__WEBPACK_IMPORTED_MODULE_1__.assertPayloadIsTransactionSignatureNeededPayload),
/* harmony export */   "assertPayloadIsTransactionSignatureNeededResponsePayload": () => (/* reexport safe */ _transaction_signature_needed_response_js__WEBPACK_IMPORTED_MODULE_2__.assertPayloadIsTransactionSignatureNeededResponsePayload)
/* harmony export */ });
/* harmony import */ var _solana_wallet_adapter_approved_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./solana-wallet-adapter-approved.js */ "./node_modules/@fractalwagmi/popup-connection/dist/esm/payloads/solana-wallet-adapter-approved.js");
/* harmony import */ var _transaction_signature_needed_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./transaction-signature-needed.js */ "./node_modules/@fractalwagmi/popup-connection/dist/esm/payloads/transaction-signature-needed.js");
/* harmony import */ var _transaction_signature_needed_response_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./transaction-signature-needed-response.js */ "./node_modules/@fractalwagmi/popup-connection/dist/esm/payloads/transaction-signature-needed-response.js");
/* harmony import */ var _message_signature_needed_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./message-signature-needed.js */ "./node_modules/@fractalwagmi/popup-connection/dist/esm/payloads/message-signature-needed.js");
/* harmony import */ var _message_signature_needed_response_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./message-signature-needed-response.js */ "./node_modules/@fractalwagmi/popup-connection/dist/esm/payloads/message-signature-needed-response.js");





//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@fractalwagmi/popup-connection/dist/esm/payloads/message-signature-needed-response.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/@fractalwagmi/popup-connection/dist/esm/payloads/message-signature-needed-response.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "assertPayloadIsMessageSignatureNeededResponsePayload": () => (/* binding */ assertPayloadIsMessageSignatureNeededResponsePayload)
/* harmony export */ });
/* harmony import */ var _lib_guards_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/guards.js */ "./node_modules/@fractalwagmi/popup-connection/dist/esm/lib/guards.js");

function assertPayloadIsMessageSignatureNeededResponsePayload(payload) {
    if (!(0,_lib_guards_js__WEBPACK_IMPORTED_MODULE_0__.isObject)(payload)) {
        return false;
    }
    if (!('decodedSignature' in payload)) {
        return false;
    }
    return typeof payload.decodedSignature === 'string';
}
//# sourceMappingURL=message-signature-needed-response.js.map

/***/ }),

/***/ "./node_modules/@fractalwagmi/popup-connection/dist/esm/payloads/message-signature-needed.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@fractalwagmi/popup-connection/dist/esm/payloads/message-signature-needed.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "assertPayloadIsMessageSignatureNeededPayload": () => (/* binding */ assertPayloadIsMessageSignatureNeededPayload)
/* harmony export */ });
/* harmony import */ var _lib_guards_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/guards.js */ "./node_modules/@fractalwagmi/popup-connection/dist/esm/lib/guards.js");

function assertPayloadIsMessageSignatureNeededPayload(payload) {
    if (!(0,_lib_guards_js__WEBPACK_IMPORTED_MODULE_0__.isObject)(payload)) {
        return false;
    }
    if (!('decodedMessage' in payload)) {
        return false;
    }
    return typeof payload.decodedMessage === 'string';
}
//# sourceMappingURL=message-signature-needed.js.map

/***/ }),

/***/ "./node_modules/@fractalwagmi/popup-connection/dist/esm/payloads/solana-wallet-adapter-approved.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@fractalwagmi/popup-connection/dist/esm/payloads/solana-wallet-adapter-approved.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "assertPayloadIsSolanaWalletAdapterApproved": () => (/* binding */ assertPayloadIsSolanaWalletAdapterApproved)
/* harmony export */ });
/* harmony import */ var _lib_guards_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/guards.js */ "./node_modules/@fractalwagmi/popup-connection/dist/esm/lib/guards.js");

function assertPayloadIsSolanaWalletAdapterApproved(payload) {
    if (!(0,_lib_guards_js__WEBPACK_IMPORTED_MODULE_0__.isObject)(payload)) {
        return false;
    }
    if (!('solanaPublicKey' in payload)) {
        return false;
    }
    if (typeof payload.solanaPublicKey !== 'string') {
        return false;
    }
    return true;
}
//# sourceMappingURL=solana-wallet-adapter-approved.js.map

/***/ }),

/***/ "./node_modules/@fractalwagmi/popup-connection/dist/esm/payloads/transaction-signature-needed-response.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/@fractalwagmi/popup-connection/dist/esm/payloads/transaction-signature-needed-response.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "assertPayloadIsTransactionSignatureNeededResponsePayload": () => (/* binding */ assertPayloadIsTransactionSignatureNeededResponsePayload)
/* harmony export */ });
/* harmony import */ var _lib_guards_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/guards.js */ "./node_modules/@fractalwagmi/popup-connection/dist/esm/lib/guards.js");

function assertPayloadIsTransactionSignatureNeededResponsePayload(payload) {
    if (!(0,_lib_guards_js__WEBPACK_IMPORTED_MODULE_0__.isObject)(payload)) {
        return false;
    }
    if (!('signedB58Transactions' in payload)) {
        return false;
    }
    if (!Array.isArray(payload.signedB58Transactions)) {
        return false;
    }
    return payload.signedB58Transactions.every(value => typeof value === 'string');
}
//# sourceMappingURL=transaction-signature-needed-response.js.map

/***/ }),

/***/ "./node_modules/@fractalwagmi/popup-connection/dist/esm/payloads/transaction-signature-needed.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@fractalwagmi/popup-connection/dist/esm/payloads/transaction-signature-needed.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "assertPayloadIsTransactionSignatureNeededPayload": () => (/* binding */ assertPayloadIsTransactionSignatureNeededPayload)
/* harmony export */ });
/* harmony import */ var _lib_guards_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/guards.js */ "./node_modules/@fractalwagmi/popup-connection/dist/esm/lib/guards.js");

function assertPayloadIsTransactionSignatureNeededPayload(payload) {
    if (!(0,_lib_guards_js__WEBPACK_IMPORTED_MODULE_0__.isObject)(payload)) {
        return false;
    }
    if (!('unsignedB58Transactions' in payload)) {
        return false;
    }
    if (!Array.isArray(payload.unsignedB58Transactions)) {
        return false;
    }
    return payload.unsignedB58Transactions.every(value => typeof value === 'string');
}
//# sourceMappingURL=transaction-signature-needed.js.map

/***/ }),

/***/ "./node_modules/@fractalwagmi/popup-connection/dist/esm/use-popup-connection.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@fractalwagmi/popup-connection/dist/esm/use-popup-connection.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "usePopupConnection": () => (/* binding */ usePopupConnection)
/* harmony export */ });
/* harmony import */ var _connection_manager_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./connection-manager.js */ "./node_modules/@fractalwagmi/popup-connection/dist/esm/connection-manager.js");
/* harmony import */ var _core_constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./core/constants.js */ "./node_modules/@fractalwagmi/popup-connection/dist/esm/core/constants.js");
/* harmony import */ var _core_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./core/types.js */ "./node_modules/@fractalwagmi/popup-connection/dist/esm/core/types.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");




const usePopupConnection = ({ enabled = true, platform = _core_types_js__WEBPACK_IMPORTED_MODULE_2__.Platform.UNKNOWN, widthPx = _core_constants_js__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_POPUP_WIDTH_PX, heightPx = _core_constants_js__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_POPUP_HEIGHT_PX, } = {}) => {
    const [exportedConnection, setExportedConnection] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(undefined);
    const connectionManagerRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(new _connection_manager_js__WEBPACK_IMPORTED_MODULE_0__.ConnectionManager(platform).onConnectionUpdated((connection) => {
        setExportedConnection(connection === null || connection === void 0 ? void 0 : connection.export());
    }));
    const open = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((url) => {
        connectionManagerRef.current.open({
            heightPx,
            url,
            widthPx,
        });
    }, [connectionManagerRef, widthPx, heightPx]);
    const close = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(() => {
        connectionManagerRef.current.close();
    }, [connectionManagerRef]);
    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {
        if (enabled) {
            connectionManagerRef.current.initialize();
        }
        else {
            connectionManagerRef.current.tearDown();
        }
    }, [connectionManagerRef]);
    return {
        close,
        connection: exportedConnection,
        open,
    };
};
//# sourceMappingURL=use-popup-connection.js.map

/***/ }),

/***/ "./node_modules/@fractalwagmi/solana-wallet-adapter/dist/esm/core/fractal-wallet-adapter-impl.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@fractalwagmi/solana-wallet-adapter/dist/esm/core/fractal-wallet-adapter-impl.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FractalWalletAdapterImpl": () => (/* binding */ FractalWalletAdapterImpl)
/* harmony export */ });
/* harmony import */ var _fractalwagmi_popup_connection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @fractalwagmi/popup-connection */ "./node_modules/@fractalwagmi/popup-connection/dist/esm/index.js");
/* harmony import */ var _solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @solana/wallet-adapter-base */ "./node_modules/@solana/wallet-adapter-base/lib/esm/errors.js");
/* harmony import */ var _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @solana/web3.js */ "./node_modules/@solana/web3.js/lib/index.browser.esm.js");
/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! bs58 */ "./node_modules/@fractalwagmi/solana-wallet-adapter/node_modules/bs58/index.js");
/* harmony import */ var _nonce_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./nonce.js */ "./node_modules/@fractalwagmi/solana-wallet-adapter/dist/esm/core/nonce.js");





const UNKNOWN_ERROR_MESSAGE = 'Unknown Error';
const FRACTAL_DOMAIN_HTTPS = 'https://fractal.is';
const APPROVE_PAGE_URL = `${FRACTAL_DOMAIN_HTTPS}/wallet-adapter/approve`;
const SIGN_PAGE_URL = `${FRACTAL_DOMAIN_HTTPS}/wallet-adapter/sign`;
const SIGN_MESSAGE_PAGE_URL = `${FRACTAL_DOMAIN_HTTPS}/wallet-adapter/sign/message`;
const MIN_POPUP_HEIGHT_PX = _fractalwagmi_popup_connection__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_POPUP_HEIGHT_PX;
const MAX_POPUP_WIDTH_PX = 850;
const LOCAL_STORAGE_KEY_FOR_PUBLIC_KEY = 'RdxqNYxF';
class FractalWalletAdapterImpl {
    constructor() {
        this.popupManager = new _fractalwagmi_popup_connection__WEBPACK_IMPORTED_MODULE_0__.ConnectionManager(_fractalwagmi_popup_connection__WEBPACK_IMPORTED_MODULE_0__.Platform.SOLANA_WALLET_ADAPTER);
        this.publicKey = null;
        this.connecting = false;
    }
    getPublicKey() {
        return this.publicKey;
    }
    async connect() {
        let resolve;
        let reject;
        const publicKeyInLocalStorage = window.localStorage.getItem(LOCAL_STORAGE_KEY_FOR_PUBLIC_KEY);
        if (publicKeyInLocalStorage) {
            this.publicKey = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__.PublicKey(publicKeyInLocalStorage);
            return Promise.resolve();
        }
        const nonce = (0,_nonce_js__WEBPACK_IMPORTED_MODULE_3__.createNonce)();
        this.popupManager.open({
            nonce,
            url: `${APPROVE_PAGE_URL}/${nonce}`,
        });
        const handleSolanaWalletAdapterApproved = (payload) => {
            if (!(0,_fractalwagmi_popup_connection__WEBPACK_IMPORTED_MODULE_0__.assertPayloadIsSolanaWalletAdapterApproved)(payload)) {
                reject(new _solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_4__.WalletConnectionError('Malformed payload when setting up connection. ' +
                    'Expected { solanaPublicKey: string } but ' +
                    `received ${JSON.stringify(payload)}`));
                this.popupManager.close();
                return;
            }
            try {
                this.publicKey = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__.PublicKey(payload.solanaPublicKey);
                window.localStorage.setItem(LOCAL_STORAGE_KEY_FOR_PUBLIC_KEY, payload.solanaPublicKey);
                resolve();
            }
            catch (error) {
                const publicKeyError = new _solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_4__.WalletPublicKeyError(error instanceof Error ? error.message : UNKNOWN_ERROR_MESSAGE, error);
                reject(publicKeyError);
            }
            this.popupManager.close();
        };
        const handleExplicitDenialByUser = () => {
            reject(new _solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_4__.WalletConnectionError('The user denied the connection.'));
            this.popupManager.close();
        };
        const handleClosedByUser = () => {
            reject(new _solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_4__.WalletConnectionError('The user denied the connection.'));
            this.popupManager.close();
        };
        this.popupManager.onConnectionUpdated(connection => {
            if (!connection) {
                return;
            }
            connection.on(_fractalwagmi_popup_connection__WEBPACK_IMPORTED_MODULE_0__.PopupEvent.SOLANA_WALLET_ADAPTER_APPROVED, handleSolanaWalletAdapterApproved);
            connection.on(_fractalwagmi_popup_connection__WEBPACK_IMPORTED_MODULE_0__.PopupEvent.SOLANA_WALLET_ADAPTER_DENIED, handleExplicitDenialByUser);
            connection.on(_fractalwagmi_popup_connection__WEBPACK_IMPORTED_MODULE_0__.PopupEvent.POPUP_CLOSED, handleClosedByUser);
        });
        return new Promise((promiseResolver, promiseRejector) => {
            resolve = promiseResolver;
            reject = promiseRejector;
        });
    }
    async disconnect() {
        this.popupManager.tearDown();
        this.publicKey = null;
        window.localStorage.removeItem(LOCAL_STORAGE_KEY_FOR_PUBLIC_KEY);
    }
    async signTransaction(transaction) {
        try {
            this.checkWalletReadiness();
            const result = await this.signTransactions([transaction]);
            return result[0];
        }
        catch (error) {
            let errorToThrow = error;
            if (!(error instanceof _solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_4__.WalletError)) {
                errorToThrow = new _solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_4__.WalletSignTransactionError(error instanceof Error ? error.message : UNKNOWN_ERROR_MESSAGE, error);
            }
            throw errorToThrow;
        }
    }
    async signAllTransactions(transactions) {
        try {
            this.checkWalletReadiness();
            const result = await this.signTransactions(transactions);
            return result;
        }
        catch (error) {
            let errorToThrow = error;
            if (!(error instanceof _solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_4__.WalletError)) {
                errorToThrow = new _solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_4__.WalletSignTransactionError(error instanceof Error ? error.message : UNKNOWN_ERROR_MESSAGE, error);
            }
            throw errorToThrow;
        }
    }
    async signMessage(encodedMessage) {
        const decodedMessage = new TextDecoder().decode(encodedMessage);
        let resolve;
        let reject;
        const handleMessageSignatureNeededResponse = (payload) => {
            if (!(0,_fractalwagmi_popup_connection__WEBPACK_IMPORTED_MODULE_0__.assertPayloadIsMessageSignatureNeededResponsePayload)(payload)) {
                const error = new _solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_4__.WalletSignMessageError('Malformed payload when signing message. ' +
                    'Expected { decodedSignature: string } ' +
                    `but received ${JSON.stringify(payload)}`);
                reject(error);
                this.popupManager.close();
                return;
            }
            const encodedSignature = Uint8Array.from(payload.decodedSignature.split(',').map(n => Number(n)));
            resolve(encodedSignature);
            this.popupManager.close();
        };
        const handleClosedOrDeniedByUser = () => {
            reject(new _solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_4__.WalletSignMessageError('The user did not approve the message'));
            this.popupManager.close();
        };
        const handleAuthLoaded = () => {
            var _a;
            const payload = {
                decodedMessage,
            };
            (_a = this.popupManager.getConnection()) === null || _a === void 0 ? void 0 : _a.send({
                event: _fractalwagmi_popup_connection__WEBPACK_IMPORTED_MODULE_0__.PopupEvent.MESSAGE_SIGNATURE_NEEDED,
                payload,
            });
        };
        const nonce = (0,_nonce_js__WEBPACK_IMPORTED_MODULE_3__.createNonce)();
        this.popupManager.open({
            heightPx: Math.max(MIN_POPUP_HEIGHT_PX, Math.floor(window.innerHeight * 0.8)),
            nonce,
            url: `${SIGN_MESSAGE_PAGE_URL}/${nonce}`,
            widthPx: Math.min(MAX_POPUP_WIDTH_PX, Math.floor(window.innerWidth * 0.8)),
        });
        this.popupManager.onConnectionUpdated(connection => {
            if (!connection) {
                return;
            }
            connection.on(_fractalwagmi_popup_connection__WEBPACK_IMPORTED_MODULE_0__.PopupEvent.MESSAGE_SIGNATURE_NEEDED_RESPONSE, handleMessageSignatureNeededResponse);
            connection.on(_fractalwagmi_popup_connection__WEBPACK_IMPORTED_MODULE_0__.PopupEvent.TRANSACTION_DENIED, handleClosedOrDeniedByUser);
            connection.on(_fractalwagmi_popup_connection__WEBPACK_IMPORTED_MODULE_0__.PopupEvent.POPUP_CLOSED, handleClosedOrDeniedByUser);
            connection.on(_fractalwagmi_popup_connection__WEBPACK_IMPORTED_MODULE_0__.PopupEvent.AUTH_LOADED, handleAuthLoaded);
        });
        return new Promise((promiseResolver, promiseRejector) => {
            resolve = promiseResolver;
            reject = promiseRejector;
        });
    }
    async signTransactions(transactions) {
        let resolve;
        let reject;
        const handleTransactionSignatureNeededResponse = (payload) => {
            if (!(0,_fractalwagmi_popup_connection__WEBPACK_IMPORTED_MODULE_0__.assertPayloadIsTransactionSignatureNeededResponsePayload)(payload)) {
                const error = new _solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_4__.WalletSignTransactionError('Malformed payload when signing transactions. ' +
                    'Expected { signedB58Transactions: string[] } ' +
                    `but received ${JSON.stringify(payload)}`);
                reject(error);
                this.popupManager.close();
                return;
            }
            const signedTransactions = payload.signedB58Transactions.map(signedB58Transaction => {
                return _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__.Transaction.from(bs58__WEBPACK_IMPORTED_MODULE_2__.decode(signedB58Transaction));
            });
            resolve(signedTransactions);
            this.popupManager.close();
        };
        const handleClosedOrDeniedByUser = () => {
            reject(new _solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_4__.WalletSignTransactionError('The user did not approve the transaction'));
            this.popupManager.close();
        };
        const handleAuthLoaded = () => {
            var _a;
            const payload = {
                unsignedB58Transactions: transactions.map(t => bs58__WEBPACK_IMPORTED_MODULE_2__.encode(t.serializeMessage())),
            };
            (_a = this.popupManager.getConnection()) === null || _a === void 0 ? void 0 : _a.send({
                event: _fractalwagmi_popup_connection__WEBPACK_IMPORTED_MODULE_0__.PopupEvent.TRANSACTION_SIGNATURE_NEEDED,
                payload,
            });
        };
        const nonce = (0,_nonce_js__WEBPACK_IMPORTED_MODULE_3__.createNonce)();
        this.popupManager.open({
            heightPx: Math.max(MIN_POPUP_HEIGHT_PX, Math.floor(window.innerHeight * 0.8)),
            nonce,
            url: `${SIGN_PAGE_URL}/${nonce}`,
            widthPx: Math.min(MAX_POPUP_WIDTH_PX, Math.floor(window.innerWidth * 0.8)),
        });
        this.popupManager.onConnectionUpdated(connection => {
            if (!connection) {
                return;
            }
            connection.on(_fractalwagmi_popup_connection__WEBPACK_IMPORTED_MODULE_0__.PopupEvent.TRANSACTION_SIGNATURE_NEEDED_RESPONSE, handleTransactionSignatureNeededResponse);
            connection.on(_fractalwagmi_popup_connection__WEBPACK_IMPORTED_MODULE_0__.PopupEvent.TRANSACTION_DENIED, handleClosedOrDeniedByUser);
            connection.on(_fractalwagmi_popup_connection__WEBPACK_IMPORTED_MODULE_0__.PopupEvent.POPUP_CLOSED, handleClosedOrDeniedByUser);
            connection.on(_fractalwagmi_popup_connection__WEBPACK_IMPORTED_MODULE_0__.PopupEvent.AUTH_LOADED, handleAuthLoaded);
        });
        return new Promise((promiseResolver, promiseRejector) => {
            resolve = promiseResolver;
            reject = promiseRejector;
        });
    }
    checkWalletReadiness() {
        if (this.publicKey === null) {
            throw new _solana_wallet_adapter_base__WEBPACK_IMPORTED_MODULE_4__.WalletNotConnectedError('`publicKey` is null. Did you forget to call `.connect()`?');
        }
    }
}
//# sourceMappingURL=fractal-wallet-adapter-impl.js.map

/***/ }),

/***/ "./node_modules/@fractalwagmi/solana-wallet-adapter/dist/esm/core/nonce.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@fractalwagmi/solana-wallet-adapter/dist/esm/core/nonce.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createNonce": () => (/* binding */ createNonce)
/* harmony export */ });
function createNonce() {
    return `${randomString()}${randomString()}${randomString()}`;
}
function randomString() {
    return (Math.random() + 1).toString(36).substring(7);
}
//# sourceMappingURL=nonce.js.map

/***/ }),

/***/ "./node_modules/@fractalwagmi/solana-wallet-adapter/dist/esm/index.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@fractalwagmi/solana-wallet-adapter/dist/esm/index.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FractalWalletAdapterImpl": () => (/* reexport safe */ _core_fractal_wallet_adapter_impl_js__WEBPACK_IMPORTED_MODULE_0__.FractalWalletAdapterImpl)
/* harmony export */ });
/* harmony import */ var _core_fractal_wallet_adapter_impl_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core/fractal-wallet-adapter-impl.js */ "./node_modules/@fractalwagmi/solana-wallet-adapter/dist/esm/core/fractal-wallet-adapter-impl.js");

//# sourceMappingURL=index.js.map

/***/ })

}]);